#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('picamserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
	debug('Ready to rumble!');
}

// Lanzamos socket.io


// TODO: Mudar esto a su propio fichero.

const imgLocation = 'D:/dummy_img/dummy.png';
const disconnectedLocation = 'D:/dummy_img/disconnected.png';
var socket = require('socket.io')(server);
var fs = require('fs');
// import * as Socket from 'socket.io';
// import * as fs from 'fs';

let clients = new Map();//<string, SocketIO.Socket>();
let connectedClients = new Map();

let watching = false;
socket.on('connection', (sock/*: SocketIO.Socket*/) => {

	clients.set(sock.id, sock);
 
	var address = sock.handshake.address;
	console.log('New connection from ' + address);

	fs.readFile(disconnectedLocation, undefined, (err/*: NodeJS.ErrnoException*/, data/*: Buffer*/) => {
		if (err) {
			console.error(err);
		} else {
			sock.emit('liveStream', 'data:image/png;base64,' + data.toString('base64'));
		}

	});

	sock.on('disconnect', () => {
		clients.delete(sock.id);
		connectedClients.delete(sock.id);
		if (clients.size === 0) {
			// Nadie más conectado, matamos el stream.

			// Cambiar variable global de watchingfile a false

			//if (proc) proc.kill();
			fs.unwatchFile(imgLocation);
		}
	});

	sock.on('start-stream', () => {
		console.log('Plz stream...');
		connectedClients.set(sock.id, sock);
		// app.set('watchingFile', true);

		//<img src="”data:image/png;base64,{{imgData}}/">
		fs.readFile(imgLocation, undefined, (err/*: NodeJS.ErrnoException*/, data/*: Buffer*/) => {
			sock.emit('liveStream', 'data:image/png;base64,' + data.toString('base64'));
		});

    
		if(!watching){
			console.log('Watching for changes...');
			watching = true;
			fs.watch(imgLocation, function (event, name) {
				if (event === 'change') {
					fs.readFile(imgLocation, undefined, (err/*: NodeJS.ErrnoException*/, data/*: Buffer*/) => {
						connectedClients.forEach((client)=>{
							client.emit('liveStream', 'data:image/png;base64,' + data.toString('base64'));
						});
					});
				}
  
			});
		}
    
	});

});

function stopStream() {
	if (clients.size === 0) {
		// app.set('watchingFile', false);
		// if (proc) proc.kill();
		fs.unwatchFile(imgLocation);
	}
}

function startStream(io/*: SocketIO.Server*/) {

	//if (app.get('watchingFile')) {
	fs.readFile(imgLocation, undefined, (err/*: NodeJS.ErrnoException*/, data/*: Buffer*/) => {
		socket.sockets.emit('liveStream', 'data:image/png;base64,' + data.toString('base64'));
	});

	//    return;
	//  }

	// var args = ["-w", "640", "-h", "480", "-o", "./stream/image_stream.jpg", "-t", "999999999", "-tl", "100"];
	// proc = spawn('raspistill', args);

}


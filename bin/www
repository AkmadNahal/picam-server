#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('picamserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
	debug('Ready to rumble!');
}

// Lanzamos socket.io


// TODO: Move this to its own file

const imgLocation = 'stream/image_stream.jpg';
const disconnectedLocation = 'D:/dummy_img/disconnected.png';
var socket = require('socket.io')(server);
const { spawn } = require('child_process');
var fs = require('fs');
// import * as Socket from 'socket.io';
// import * as fs from 'fs';

const milisecondsInterval = 75;
let clients = new Map();//<string, SocketIO.Socket>();
let connectedClients = new Map();

let watching = false; // controls if we are watching the image file
let raspistill; // the child process we will launch to generate images

let lastImg;
let setIntervalID;

fs.readFile(imgLocation, undefined, (err/*: NodeJS.ErrnoException*/, data/*: Buffer*/) => {
	lastImg = 'data:image/jpg;base64,' + data.toString('base64');
});

let readImg = () => {
	//if (event === 'change') {
	console.log('Reading image ' + new Date().toString());
	// Notify all clients of change.
	fs.readFile(imgLocation, undefined, (err/*: NodeJS.ErrnoException*/, data/*: Buffer*/) => {
		lastImg = 'data:image/jpg;base64,' + data.toString('base64');
		connectedClients.forEach((client) => {
			client.emit('liveStream', lastImg);
		});
	});
};

let disconnectFromStream = (sock) => {
	connectedClients.delete(sock.id);

	if (connectedClients.size === 0) {
		// If nobody watches then we kill the process and stop watching the file.
		console.log('No more clients, killing proccess...');
		if (raspistill) raspistill.kill();
		raspistill = undefined;		
		watching = false;
		clearInterval(setIntervalID);
		console.log('He dead.');
	} else {
		console.log('Remaining connected clients ' + connectedClients);
	}
};

socket.on('connection', (sock/*: SocketIO.Socket*/) => {

	clients.set(sock.id, sock);

	let address = sock.handshake.address;
	console.log('New connection from ' + address);

	sock.emit('connected');

	sock.on('disconnect', () => {
		console.log('Disconnect (socket) from client ' + address);
		clients.delete(sock.id);
		disconnectFromStream(sock);


	});

	sock.on('disconnect-client', () => {
		console.log('Disconnect (button) from client ' + address);
		disconnectFromStream(sock);
	});

	sock.on('start-stream', () => {
		console.log('Plz stream...');
		connectedClients.set(sock.id, sock);
		// app.set('watchingFile', true);

		if (!raspistill) {
			console.log('No raspistill found, spawning one.');
			let args = ['-w', '640', '-h', '480', '-q', '80', '-o', './stream/image_stream.jpg', '-t', '999999999', '-tl', milisecondsInterval.toString()];

			raspistill = spawn('raspistill', args);
			raspistill.on('error', (err) => {
				console.warn("Something happened while trying to spawn the raspistill command. Maybe this'll help:");
				console.warn(err);
			});

		}

		// Send connected client the current image
		sock.emit('liveStream', lastImg);


		if (!watching) {
			console.log('Periodically check file for changes');
			watching = true;

			setIntervalID = setInterval(readImg, milisecondsInterval);
		}

	});

});



